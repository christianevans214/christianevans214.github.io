(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var CalendarModel = function () {
  /**
   * Constructs an instance of class.
   */
  function CalendarModel() {
    _classCallCheck(this, CalendarModel);

    this.month; //0 through 11 representing January through December.
    this.year;
  }

  //Mutator methods
  /**
   * Adds/subtracts X number of months.
   * @param {number} int positive or negative number of months.
   * @return {boolean} Whether month increment was successful.
   */


  _createClass(CalendarModel, [{
    key: "addToMonth",
    value: function addToMonth(int) {
      if (this.month === undefined && this.year === undefined) return false;
      var totalMonths = int + this.getMonth();
      var numYearsToAdd = Math.floor(totalMonths / 12);
      var newMonth = totalMonths % 12;
      if (totalMonths < 0) newMonth = 12 * Math.ceil(-1 * totalMonths / 12) + totalMonths;
      this.setMonth(newMonth);
      return this.setYear(this.getYear() + numYearsToAdd);
    }

    /**
     * Sets month value of Calendar state.
     * @param {number} month Month of the year.
     * @return {boolean} Boolean whether setting state was successful.
     */

  }, {
    key: "setMonth",
    value: function setMonth(month) {
      var MAX_MONTH_IN_YEAR = 11;
      if (month < 0 || month > MAX_MONTH_IN_YEAR) return false;
      this.month = month;
      return true;
    }

    /**
     * Sets year value of Calendar state.
     * @param {number} year Year of Calendar.
     * @return {boolean} Boolean whether setting state was successful.
     */

  }, {
    key: "setYear",
    value: function setYear(year) {
      var MAX_JS_DATE_YEAR = 285616; //Approx. max year defined by MSDN.
      if (year <= MAX_JS_DATE_YEAR * -1 || year >= MAX_JS_DATE_YEAR) return false;
      this.year = year;
      return true;
    }

    //Accessor methods.
    /**
     * Returns month value of Calendar state.
     * @return {number} Calendar month.
     */

  }, {
    key: "getMonth",
    value: function getMonth() {
      return this.month;
    }

    /**
     * Returns year value of Calendar state.
     * @return {number} Calendar year.
     */

  }, {
    key: "getYear",
    value: function getYear() {
      return this.year;
    }

    //Validation methods.
    /**
     * Checks if day exists given a certain month and year.
     * @return {boolean} Whether day is in month and year.
     */

  }, {
    key: "dayInMonthAndYear",
    value: function dayInMonthAndYear(day) {
      return new Date(this.year, this.month, day).getMonth() === this.getMonth();
    }

    //Output methods.
    /**
     * Generates 2D array representation of calendar month.
     * @return {Array} Array representing calendar month.
     */

  }, {
    key: "generateCalendar",
    value: function generateCalendar() {
      var DAYS_IN_WEEK = 7;
      var firstDay = new Date(this.year, this.month, 1).getDay();
      var calendarArr = [];
      var weekArr = Array.apply(null, Array(firstDay)).map(function () {
        return null;
      });
      var dayCount = 1;
      while (this.dayInMonthAndYear(dayCount)) {
        if (weekArr.length !== 0 && weekArr.length % DAYS_IN_WEEK === 0) {
          calendarArr.push(weekArr.slice());
          weekArr.length = 0;
        }
        weekArr.push(dayCount);
        dayCount++;
      }
      if (weekArr.length > 0) {
        calendarArr.push(weekArr.concat(Array.apply(null, Array(DAYS_IN_WEEK - weekArr.length)).map(function () {
          return null;
        })));
      }
      return calendarArr;
    }
  }]);

  return CalendarModel;
}();

exports.default = CalendarModel;

},{}],2:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _calendar_model = require('./calendar_model');

var _calendar_model2 = _interopRequireDefault(_calendar_model);

var _utils = require('../utilities/utils');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var weekdays = [{ short: 'S', long: 'Sunday' }, { short: 'M', long: 'Monday' }, { short: 'T', long: 'Tuesday' }, { short: 'W', long: 'Wednesday' }, { short: 'T', long: 'Thursday' }, { short: 'F', long: 'Friday' }, { short: 'S', long: 'Saturday' }];

var months = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];

var Calendar = function () {
  /**
   * Constructs an instance of a Calendar View.
   */
  function Calendar(parent) {
    _classCallCheck(this, Calendar);

    var today = new Date();
    this.parent = parent;
    this.calendar = new _calendar_model2.default();
    this.calendar.setMonth(today.getMonth());
    this.calendar.setYear(today.getFullYear());
    this.selected = {
      day: today.getDate(),
      month: today.getMonth(),
      year: today.getFullYear()
    };
    this.init();
  }

  /**
   * On click, toggles month.
   * @param {number} int Number of months (-/+) to add to calendar months.
   */


  _createClass(Calendar, [{
    key: 'onClickToggleMonth',
    value: function onClickToggleMonth(int) {
      this.calendar.addToMonth(int);
      var month = months[this.calendar.getMonth()];
      var year = this.calendar.getYear();
      var monthDisplay = this.parent.getElementsByClassName('month-display')[0];
      monthDisplay.textContent = month + ' ' + year;
      var oldDatepicker = this.parent.getElementsByClassName('datepicker')[0];
      var parentNode = oldDatepicker.parentNode;
      parentNode.removeChild(oldDatepicker);
      parentNode.appendChild(this.constructCalendar());
    }

    /**
     * On click, changes day.
     * @param {number} day Day to switch to.
     */

  }, {
    key: 'onClickChangesDay',
    value: function onClickChangesDay(evt) {
      this.selected = {
        day: +evt.currentTarget.textContent,
        month: this.calendar.getMonth(),
        year: this.calendar.getYear()
      };
      this.updateCalendarDay(evt.currentTarget);
      this.updateCalendarDisplay();
    }

    /**
     * Updates active calendar day to match state.
     * @param {Object} newElem New DOM element for day to be active.
     */

  }, {
    key: 'updateCalendarDay',
    value: function updateCalendarDay(newElem) {
      var oldDay = this.parent.getElementsByClassName('active-day')[0];
      if (oldDay) (0, _utils.toggleClass)(oldDay, 'active-day');
      (0, _utils.toggleClass)(newElem, 'active-day');
    }

    /**
     * Updates calendar display to match state.
     */

  }, {
    key: 'updateCalendarDisplay',
    value: function updateCalendarDisplay() {
      var _selected = this.selected;
      var day = _selected.day;
      var month = _selected.month;
      var year = _selected.year;

      var selectedDay = new Date(year, month, day);
      var displayHeader = this.parent.querySelector('.display-weekday > span');
      var displayDay = this.parent.querySelector('.display-day > h1');
      if (displayHeader) displayHeader.textContent = '' + weekdays[selectedDay.getDay()].long;
      if (displayDay) displayDay.textContent = '' + selectedDay.getDate();
    }

    /**
     * Checks if a current day in calendar view is selected day.
     * @param {number} day Day to check.
     * @return {boolean} Whether day is current selected day.
     */

  }, {
    key: 'dayIsSelectedDay',
    value: function dayIsSelectedDay(day) {
      return day === this.selected.day && this.calendar.getMonth() === this.selected.month && this.calendar.getYear() === this.selected.year;
    }

    /**
     * Constructs initial month toggler.
     * @return {Object} DOM element.
     */

  }, {
    key: 'constructMonthToggler',
    value: function constructMonthToggler() {
      var month = months[this.calendar.getMonth()];
      var year = this.calendar.getYear();
      var decrement = this.onClickToggleMonth.bind(this, -1);
      var increment = this.onClickToggleMonth.bind(this, 1);
      return (0, _utils.d)('div', { class: 'month-toggle' }, [(0, _utils.d)('span', {
        class: 'toggle-down toggle',
        eventListener: { type: 'click', fn: decrement }
      }, '<'), (0, _utils.d)('div', { class: 'toggle-display' }, [(0, _utils.d)('span', { class: 'month-display' }, month + ' ' + year)]), (0, _utils.d)('span', {
        class: 'toggle-up toggle',
        eventListener: { type: 'click', fn: increment }
      }, '>')]);
    }

    /**
     * Formats class name for a specific calendar day element.
     * @param {number} day Calendar day.
     * @return {string} Class string.
     */

  }, {
    key: '_formatDayClass',
    value: function _formatDayClass(day) {
      return [this.dayIsSelectedDay(day) ? 'active-day' : '', day === null ? '' : 'day'].join(' ');
    }

    /**
     * Constructs initial calendar grid.
     * @return {Object} DOM element.
     */

  }, {
    key: 'constructCalendar',
    value: function constructCalendar() {
      var _this = this;

      var calendar = this.calendar.generateCalendar();
      var dayClick = this.onClickChangesDay.bind(this);
      return (0, _utils.d)('div', { class: 'datepicker' }, [(0, _utils.d)('div', { class: 'datepicker-header' }, weekdays.map(function (weekday) {
        return (0, _utils.d)('span', {}, weekday.short);
      })), (0, _utils.d)('div', { class: 'datepicker-body' }, calendar.map(function (week, i) {
        return (0, _utils.d)('div', { class: 'datepicker-week' }, week.map(function (day, j) {
          return (0, _utils.d)('span', {
            class: _this._formatDayClass(day),
            eventListener: day === null ? null : { type: 'click', fn: dayClick }
          }, day ? '' + day : '');
        }));
      }))]);
    }

    /**
     * Renders calendar component based on state.
     * @return {Object} DOM element.
     */

  }, {
    key: 'initialRender',
    value: function initialRender() {
      var _selected2 = this.selected;
      var day = _selected2.day;
      var month = _selected2.month;
      var year = _selected2.year;

      var selectedDay = new Date(year, month, day);
      return (0, _utils.d)('div', { class: 'calendar-container' }, [(0, _utils.d)('div', { class: 'calendar-display-container' }, [(0, _utils.d)('div', { class: 'display-weekday' }, [(0, _utils.d)('span', {}, '' + weekdays[selectedDay.getDay()].long)]), (0, _utils.d)('div', { class: 'display-day' }, [(0, _utils.d)('h1', {}, '' + selectedDay.getDate())])]), (0, _utils.d)('div', { class: 'datepicker-container' }, [this.constructMonthToggler(), this.constructCalendar()])]);
    }

    /**
     * Initializes calendar component to DOM.
     */

  }, {
    key: 'init',
    value: function init() {
      var component = this.initialRender();
      this.parent.appendChild(component);
    }
  }]);

  return Calendar;
}();

exports.default = Calendar;

},{"../utilities/utils":4,"./calendar_model":1}],3:[function(require,module,exports){
'use strict';

var _calendar_view = require('./calendar/calendar_view');

var _calendar_view2 = _interopRequireDefault(_calendar_view);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

window.App = {
  Calendar: _calendar_view2.default
};

},{"./calendar/calendar_view":2}],4:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.d = d;
exports.toggleClass = toggleClass;
/**
 * Simple wrapper to construct a JS DOM tree. Based on react-hyperscript.
 * @param {string} tag DOM tag.
 * @param {Object} attributes Attributes to set onto DOM component.
 * @param {Array|string=} Either an array of d functions or a string for innerText.
 * @return {Object} DOM element.
 */
function d(tag, attributes) {
  var children = arguments.length <= 2 || arguments[2] === undefined ? '' : arguments[2];

  var element = document.createElement(tag);

  Object.keys(attributes).forEach(function (attr) {
    if (attr === 'eventListener') return;
    element.setAttribute(attr, attributes[attr]);
  });

  if (attributes.eventListener) {
    element.addEventListener(attributes.eventListener.type, attributes.eventListener.fn);
  }

  if (typeof children === 'string') {
    element.textContent = children;
  } else {
    children.forEach(function (child) {
      element.appendChild(child);
    });
  }

  return element;
}

/**
 * Toggles class for a given element.
 * @param {Object} element DOM element.
 * @param {string} className class to toggle.
 */
function toggleClass(element, className) {
  var classArr = element.className.split(' ');
  var classNameIdx = classArr.indexOf(className);
  if (classNameIdx === -1) {
    classArr.push(className);
  } else {
    classArr.splice(classNameIdx, 1);
  }
  element.className = classArr.join(' ');
}

},{}]},{},[3]);
